syntax = "proto3";

package fox.pando.service;
option go_package = ".;api";

import "google/protobuf/timestamp.proto";

message Pagination {
    string next_cursor = 1;
    bool has_next = 2;
}

enum Action {
    _ = 0;
    // sys
    SysWithdraw = 1;
    ActionSysProperty = 2;
    // proposal
    ProposalMake = 11;
    ProposalShout = 12;
    ProposalVote = 13;
    // Collateral
    CatCreate = 21;
    CatSupply = 22;
    CatEdit = 23;
    CatFold = 24;
    // Vaults
    VatOpen = 31;
    VatDeposit = 32;
    VatWithdraw = 33;
    VatPayback = 34;
    VatGenerate = 35;
    // Flips
    FlipKick = 41;
    FlipBid = 42;
    FlipDeal = 43;
    // Oracles
    OracleCreate = 51;
    OracleEdit = 52;
    OraclePoke = 53;
    OracleRely = 54;
    OracleDeny = 55;
}

message Asset {
    // mixin asset id
    string id = 1;
    string name = 2;
    string symbol = 3;
    string logo = 4;
    string chain_id = 5;
    Asset chain = 6;
    string price = 7;
}

message Collateral {
    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    string name = 3;
    string gem = 4;
    string dai = 5;
    string ink = 6;
    string art = 7;
    string rate = 8;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp rho = 9;
    string debt = 10;
    string line = 11;
    string dust = 12;
    string price = 13;
    string mat = 14;
    string duty = 15;
    string chop = 16;
    string dunk = 17;
    string beg = 18;
    int32 ttl = 19;
    int32 tau = 20;
    bool live = 21;
    int64 number_of_vaults = 22;
    string box = 23;
    string litter = 24;
    string supply = 25;
}

message Vault {
    message Event {
        string vault_id = 1;
        // @inject_tag: swaggertype:"string" format:"date"
        google.protobuf.Timestamp created_at = 2;
        Action action = 3;
        string dink = 4;
        string dart = 5;
        string debt = 6;
    }

    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    string collateral_id = 3;
    string ink = 4;
    string art = 5;
    int64 identity_id = 6;
}

message Flip {
    message Event {
        string flip_id = 1;
        // @inject_tag: swaggertype:"string" format:"date"
        google.protobuf.Timestamp created_at = 2;
        Action action = 3;
        string bid = 4;
        string lot = 5;
    }

    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp tic = 3;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp end = 4;
    string bid = 5;
    string lot = 6;
    string tab = 7;
    string art = 8;
    string collateral_id = 9;
    string vault_id = 10;
    string Guy = 11;
    Action action = 12;
}

message Oracle {
    string asset_id = 1;
    int32 hop = 2;
    string current = 3;
    string next = 4;
    // @inject_tag: swaggertype:"string" format:"date"
    // last update of current price
    google.protobuf.Timestamp peek_at = 5;
    int32 threshold = 6;
    repeated string governors = 7;
}

message Transaction {
    enum Status {
        Pending = 0;
        Abort = 1;
        OK = 2;
    }
    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    string asset_id = 3;
    string amount = 4;
    Action action = 5;
    Status status = 6;
    string msg = 7;
    string parameters = 8;
}

message Req {
    message FindAsset {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message ListAssets {}

    message FindOracle {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message ListOracles {}

    // List All Collaterals
    message ListCollaterals {}

    // Find Collateral By TraceID
    message FindCollateral {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message FindVault{
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    // List All Vaults
    message ListVaults {
        string collateral_id = 1;
        string user_id = 2;
        string cursor = 3;
        int64 limit = 4;
    }

    message ListMyVaults{
        string cursor = 1;
        int64 limit = 2;
    }


    message ListVaultEvents {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message FindFlip {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message ListFlips {
        string cursor = 1;
        int64 limit = 2;
    }

    message ListFlipEvents {
        string id = 1;
    }

    // Find Tx By FollowID
    message FindTransaction {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message ListTransactions {
        string cursor = 1;
        int64 limit = 2;
    }
}

message Resp {
    message ListAssets {
        repeated Asset assets = 1;
    }

    message ListOracles {
        repeated Oracle oracles = 1;
    }

    message ListCollaterals {
        repeated Collateral collaterals = 1;
    }

    message ListVaults {
        repeated Vault vaults = 1;
        Pagination pagination = 2;
    }

    message ListVaultEvents {
        repeated Vault.Event events = 1;
    }

    message ListFlips {
        repeated Flip flips = 1;
        Pagination pagination = 2;
    }

    message ListFlipEvents {
        repeated Flip.Event events = 1;
    }

    message ListTransactions {
        repeated Transaction transactions = 1;
        Pagination pagination = 2;
    }
}

service Pando {
    // assets
    rpc FindAsset(Req.FindAsset) returns (Asset);
    rpc ListAssets(Req.ListAssets) returns (Resp.ListAssets);
    // oracles
    rpc FindOracle(Req.FindOracle) returns (Oracle);
    rpc ListOracles(Req.ListOracles) returns (Resp.ListOracles);
    // collaterals
    rpc ListCollaterals(Req.ListCollaterals) returns (Resp.ListCollaterals);
    rpc FindCollateral(Req.FindCollateral) returns (Collateral);
    // vaults
    rpc FindVault(Req.FindVault) returns (Vault);
    rpc ListVaults(Req.ListVaults) returns (Resp.ListVaults);
    rpc ListMyVaults(Req.ListMyVaults) returns (Resp.ListVaults);
    rpc ListVaultEvents(Req.ListVaultEvents) returns (Resp.ListVaultEvents);
    // flips
    rpc FindFlip(Req.FindFlip) returns (Flip);
    rpc ListFlips(Req.ListFlips) returns (Resp.ListFlips);
    rpc ListFlipEvents(Req.ListFlipEvents) returns (Resp.ListFlipEvents);
    // tx
    rpc FindTransaction(Req.FindTransaction) returns (Transaction);
    rpc ListTransactions(Req.ListTransactions) returns (Resp.ListTransactions);
}
